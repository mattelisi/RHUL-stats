data(Machines)
data(machines)
# slides & formatting
options(htmltools.dir.version = FALSE)
options(crayon.enabled = TRUE)
xaringanExtra::use_xaringan_extra(c("tile_view", "animate_css", "tachyons"))
# css: [rladies-fonts, default, custom/style.css]
library(xaringanthemer)
style_solarized_light(colors = c(
red = "#f34213",
purple = "#3e2f5b",
orange = "#ff8811",
green = "#136f63",
white = "#FFFFFF",
blue = " #0000FF"
))
# R stuff
library(lme4)
library(ggplot2)
nice_theme <- theme_xaringan()+theme(text=element_text(size=9),panel.border=element_blank(),strip.text=element_text(size=rel(0.8)),axis.text=element_text(size=8),panel.grid.minor=element_blank(),axis.line=element_line(size=.4), axis.title=element_text(size=11), legend.title=element_text(size=11))
theme_set(nice_theme)
background_plot <- nice_theme$plot.background$colour
knitr::opts_knit$set(global.par = TRUE) # fix par for multiple plots
library(tidyverse)
library(kableExtra)
library(MEMSS)
install.packages("MEMSS")
library(MEMSS)
data(Machines)
str(Machines)
Machines %>%
ggplot(aes(y=Machine, x=score))+
geom_point(aes(color=Worker))
contrasts(Machine)
contrasts(Machines$Machine)
machine.mod <- lmer(score ~ Machine + (Machine|Worker), Machines)
summary(machine.mod)
contrasts(Machines$Machine)
?contr.treatment
levels(Machines$Machine)
contrasts(Machines$Machine) <- contr.treatment(levels(Machines$Machine), base="B")
contrasts(Machines$Machine) <- contr.treatment(unique(Machines$Machine), base="B")
levels(Machines$Machine)
contr.treatment(levels(Machines$Machine), base=2)
machine.mod <- lmer(score ~ Machine + (Machine|Worker), Machines)
summary(machine.mod)
contrasts(Machines$Machine) <- contr.treatment(levels(Machines$Machine), base=2)
contrasts(Machines$Machine)
machine.mod <- lmer(score ~ Machine + (Machine|Worker), Machines)
summary(machine.mod)
confint(machine.mod, method="boot", nsim=500, oldNames=F)
?confint.merMod
print(confint(machine.mod, method="boot", nsim=250, oldNames=F),digits=2)
Machines %>%
ggplot(aes(y=Machine, x=score, color=Worker)) +
geom_point()
Machines %>%
ggplot(aes(y=Machine, x=score, color=Worker)) +
geom_point()+geom_line()
Machines %>%
ggplot(aes(y=Machine, x=score, color=Worker)) +
geom_jitter()
Machines %>%
ggplot(aes(y=Machine, x=score, color=Worker)) +
geom_boxplot()
Machines %>%
ggplot(aes(x=Machine, y=score, color=machine)) +
facet_wrap(~Worker, ncol=6)+
geom_boxplot()
Machines %>%
ggplot(aes(x=Machine, y=score, color=Machine)) +
facet_wrap(~Worker, ncol=6)+
geom_boxplot()
Machines %>%
ggplot(aes(x=Machine, y=score, color=Machine)) +
facet_wrap(~Worker, ncol=3)+
geom_boxplot()
Machines %>%
group_by(Worker, Machine) %>%
summarise(score = mean(score),
score_sd =sd(score)) %>%
ggplot(aes(x=Machine, y=score, color=Machine)) +
facet_wrap(~Worker, ncol=3)+
geom_point() +
geom_errorbar(aes(ymin=score-score_sd, ymax=score+score_sd))
Machines %>%
group_by(Worker, Machine) %>%
summarise(score = mean(score),
score_sd =sd(score))
Machines %>%
group_by(Worker, Machine) %>%
summarise(score_sd =sd(score),
score = mean(score)) %>%
ggplot(aes(x=Machine, y=score, color=Machine)) +
facet_wrap(~Worker, ncol=3)+
geom_point() +
geom_errorbar(aes(ymin=score-score_sd, ymax=score+score_sd))
Machines %>%
group_by(Worker, Machine) %>%
summarise(score_sd =sd(score),
score = mean(score)) %>%
ggplot(aes(x=Machine, y=score, color=Machine)) +
facet_wrap(~Worker, ncol=3)+
geom_point() +
geom_errorbar(aes(ymin=score-score_sd, ymax=score+score_sd), width=0)
# load package
library(FinancialMath)
# settings
mortgage_amount <- 370 * 10^3
length <- 30 # in years
interest_rate <- 0.0389 # annual
tab1 <- amort.table(Loan=mortgage_amount ,
n=length * 12,
pmt=NA,
i=interest_rate/12,
ic=1,
pf=1,
plot=F)
# summary
format(tab1$Other, scientific = F, digits=1)
# amortization and payment schedule
mdat <- data.frame(tab1$Schedule)
str(mdat)
tab1 <- amort.table(Loan=mortgage_amount ,
n=length * 12,
pmt=NA,
i=interest_rate/12,
ic=1,
pf=1,
plot=T)
# amortization and payment schedule
mdat <- data.frame(tab1$Schedule)
str(mdat)
# amount of interest paid in first 5 years
sum(mdat$Interest.Paid[1:(12*5)])
sum(mdat$Principal.Paid[1:(12*5)])
plot(1:(12*5), mdat$Balance[1:(12*5)])
mdat$Balance[(12*5)]
value_drop <- 0.10
(sum(mdat$Interest.Paid[1:(12*5)]) + 450*10^3*value_drop)/(12*5) # eq rent
# calculate amount lost for a give drop in value if we sell in 5 years
# and see how much it would turn out to be in equivalent montly rent
value_drop <- 0.05
(sum(mdat$Interest.Paid[1:(12*5)]) + 450*10^3*value_drop)/(12*5) # eq rent
# calculate amount lost for a give drop in value if we sell in 5 years
# and see how much it would turn out to be in equivalent montly rent
value_drop <- 0.05
(sum(mdat$Interest.Paid[1:(12*10)]) + 450*10^3*value_drop)/(12*10) # eq rent
rm(list=ls())
setwd("/mnt/D/Dropbox/sync/RHUL/stats_role/WORKSHOPS/workshop_LMM")
library(lme4)
data("sleepstudy")
m.ML <- lmer(Reaction ~ Days + (Days|Subject), data=sleepstudy, REML=F)
m.REML <- lmer(Reaction ~ Days + (Days|Subject), data=sleepstudy, REML=T)
VarCorr(m.ML)
VarCorr(m.REML)
library(MEMSS)
library(lmerTest)
data(Machines)
str(Machines)
contrasts(Machines$Machine) <- contr.treatment(levels(Machines$Machine), base=2)
contrasts(Machines$Machine)
machine.mod <- lmer(score ~ Machine + (Machine|Worker), Machines)
summary(machine.mod)
#### CHANGE EFFECT SIZE
cohen_sigma <- sqrt(fit_par$sigma^2/(3-1) +
Omega$Worker["(Intercept)","(Intercept)"] +
Omega$Worker["MachineC","MachineC"] +
2*Omega$Worker["(Intercept)","MachineC"])
fit_par <- getME(machine.mod, c("theta","sigma"))
fit_par$beta <- fixef(machine.mod)
cohen_sigma <- sqrt(fit_par$sigma^2/(3-1) +
Omega$Worker["(Intercept)","(Intercept)"] +
Omega$Worker["MachineC","MachineC"] +
2*Omega$Worker["(Intercept)","MachineC"])
# getME(machine.mod, c("theta","fixef","sigma"))
fit_par <- getME(machine.mod, c("theta","sigma"))
fit_par$beta <- fixef(machine.mod)
#### CHANGE EFFECT SIZE
cohen_sigma <- sqrt(fit_par$sigma^2/(3-1) +
Omega$Worker["(Intercept)","(Intercept)"] +
Omega$Worker["MachineC","MachineC"] +
2*Omega$Worker["(Intercept)","MachineC"])
Omega <- VarCorr(machine.mod)
cohen_sigma <- sqrt(fit_par$sigma^2/(3-1) +
Omega$Worker["(Intercept)","(Intercept)"] +
Omega$Worker["MachineC","MachineC"] +
2*Omega$Worker["(Intercept)","MachineC"])
new_beta_MachineC <- 0.5 * cohen_sigma
fit_par$beta["MachineC"] <- new_beta_MachineC
sim_res$cohen_d <- cohen_d
N_sim <- 200
N_workers <- c(6, 7, 8, 9, 10, 12, 15, 25, 50, 75, 100, 150, 200)
sim_res <- {}
for(w in N_workers){
for(i in 1:N_sim){
p_val <- test_significance(simulate_data(w, fit_par))
sim_res <- rbind(sim_res, data.frame(N=w, p=p_val))
}
}
simulate_data <- function(N, fit_par){
sim_d <- expand.grid(Worker = factor(1:N),
Machine = unique(Machines$Machine),
rep = 1:3)
contrasts(sim_d$Machine) <- contr.treatment(levels(sim_d$Machine), base=2)
sim_d$score <- simulate(~ Machine + (Machine|Worker),
nsim=1,
family=gaussian,
newdata = sim_d,
newparams=fit_par,
use.u = FALSE)$sim_1
return(sim_d)
}
test_significance <- function(sim_d){
mod <- lmer(score ~ Machine + (Machine|Worker), sim_d)
p_value <- summary(mod)$coefficients["MachineC","Pr(>|t|)"]
return(p_value)
}
N_sim <- 200
N_workers <- c(6, 7, 8, 9, 10, 12, 15, 25, 50, 75, 100, 150, 200)
sim_res <- {}
for(w in N_workers){
for(i in 1:N_sim){
p_val <- test_significance(simulate_data(w, fit_par))
sim_res <- rbind(sim_res, data.frame(N=w, p=p_val))
}
}
sim_res$cohen_d <- 0.5
sim_res$significant <- ifelse(sim_res$p<0.05,1,0)
sim_res_all <- rbind(readRDS("./misc/machine_sim01_d.RDS"), readRDS("./misc/machine_sim02_d.RDS"))
sim_res_all %>%
group_by(N,cohen_d) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=cohen_d, color=cohen_d))+
geom_line()+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
library(tidyverse)
sim_res_all %>%
group_by(N,cohen_d) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=cohen_d, color=cohen_d))+
geom_line()+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
saveRDS(sim_res, "./misc/machine_sim02_d.RDS")
sim_res_all <- rbind(readRDS("./misc/machine_sim01_d.RDS"), readRDS("./misc/machine_sim02_d.RDS"))
sim_res_all %>%
group_by(N,cohen_d) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=cohen_d, color=cohen_d))+
geom_line()+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
sim_res <- sim_res[sim_res$N<=100,]
saveRDS(sim_res, "./misc/machine_sim02_d.RDS")
sim_res_all <- rbind(readRDS("./misc/machine_sim01_d.RDS"), readRDS("./misc/machine_sim02_d.RDS"))
sim_res_all %>%
group_by(N,cohen_d) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=cohen_d, color=cohen_d))+
geom_line()+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
Omega$Worker
attr(Omega$Worker, "stddev")
attr(Omega$Worker, "correlation")
VarCov2Theta <- function(X, sigma){
X <- t(chol(X/sigma^2))
X_unpacked <- X[lower.tri(X, diag=T)]
return(X_unpacked)
}
fit_par <- getME(machine.mod, c("theta","sigma"))
fit_par$beta <- fixef(machine.mod)
Omega <- VarCorr(machine.mod)
Omega <- VarCorr(machine.mod)$Worker
Omega
diag(Omega)
fit_par
Omega_i <- Omega
diag(Omega_i) <- diag(Omega_i)*vs
vs = 1.5
Omega_i <- Omega
diag(Omega_i) <- diag(Omega_i)*vs
Omega_i
Omega
attr(Omega, "correlation")
attr(Omega, "stddev")
attr(Omega, "stddev")
diag(attr(Omega, "stddev"))
diag(attr(Omega, "stddev")) %*% attr(Omega, "correlation") %*% diag(attr(Omega, "stddev"))
Omega
VarCov2Theta(Omega_i, fit_par$sigma)
fit_par$theta
fit_par$theta <- VarCov2Theta(Omega_i, fit_par$sigma)
p_val <- test_significance(simulate_data(w, fit_par))
names(fit_par$theta)
fit_par <- getME(machine.mod, c("theta","sigma"))
fit_par$beta <- fixef(machine.mod)
# random-effects parameter estimates: these are parameterized as the relative Cholesky factors of each random effect term
Omega <- VarCorr(machine.mod)$Worker
diag(Omega)
diag(attr(Omega, "stddev")) %*% attr(Omega, "correlation") %*% diag(attr(Omega, "stddev"))
attr(Omega, "correlation")
theta_names <- names(fit_par$theta)
Omega_i <- (vs*diag(attr(Omega, "stddev"))) %*% attr(Omega, "correlation") %*% (vs*diag(attr(Omega, "stddev")))
fit_par$theta <- VarCov2Theta(Omega_i, fit_par$sigma)
names(fit_par$theta) <- theta_names
fit_par$theta
p_val <- test_significance(simulate_data(w, fit_par))
sim_res <- rbind(sim_res, data.frame(N=w, p=p_val, vs=vs))
Omega <- VarCorr(machine.mod)$Worker
theta_names <- names(fit_par$theta)
N_sim <- 200
N_workers <- c(6, 7, 8, 9, 10, 12, 15)
variance_scaling <- c(1.5, 2)
sim_res3 <- {}
for(vs in variance_scaling){
for(w in N_workers){
for(i in 1:N_sim){
Omega_i <- (vs*diag(attr(Omega, "stddev"))) %*% attr(Omega, "correlation") %*% (vs*diag(attr(Omega, "stddev")))
fit_par$theta <- VarCov2Theta(Omega_i, fit_par$sigma)
names(fit_par$theta) <- theta_names
p_val <- test_significance(simulate_data(w, fit_par))
sim_res3 <- rbind(sim_res, data.frame(N=w, p=p_val, vs=vs))
}
}
}
fit_par <- getME(machine.mod, c("theta","sigma"))
fit_par$beta <- fixef(machine.mod)
# random-effects parameter estimates: these are parameterized as the relative Cholesky factors of each random effect term
Omega <- VarCorr(machine.mod)$Worker
theta_names <- names(fit_par$theta)
N_sim <- 200
N_workers <- c(6, 7, 8, 9, 10, 12, 15)
variance_scaling <- c(1.5, 2)
sim_res3 <- {}
for(vs in variance_scaling){
for(w in N_workers){
for(i in 1:N_sim){
Omega_i <- (vs*diag(attr(Omega, "stddev"))) %*% attr(Omega, "correlation") %*% (vs*diag(attr(Omega, "stddev")))
fit_par$theta <- VarCov2Theta(Omega_i, fit_par$sigma)
names(fit_par$theta) <- theta_names
p_val <- test_significance(simulate_data(w, fit_par))
sim_res3 <- rbind(sim_res3, data.frame(N=w, p=p_val, vs=vs))
}
}
}
sim01 <- readRDS("./misc/machine_sim01_d.RDS")
sim01$vs <- 1
sim03 <- rbind(sim01, sim_res3)
str(sim01)
sim_res3$cohen_d <- NA
sim03 <- rbind(sim01, sim_res3)
sim_res2$significant <- ifelse(sim_res3$p<0.05,1,0)
sim_res3$significant <- ifelse(sim_res3$p<0.05,1,0)
sim03 <- rbind(sim01, sim_res3)
str(sim03)
saveRDS(sim03, "./misc/machine_sim03.RDS")
sim03 %>%
group_by(N,vs) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=vs, color=vs))+
geom_line()+
scale_color_continuous(name="variance\nscaling")+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
sim03 <- readRDS("./misc/machine_sim03.RDS")
sim03 %>%
group_by(N,vs) %>%
summarise(SE = sqrt((mean(significant) * (1 - mean(significant)))/length(significant)),
significant = mean(significant)) %>%
ggplot(aes(x=N, y=significant, group=vs, color=vs))+
geom_line()+
scale_color_continuous(name="variance\nscaling")+
geom_errorbar(aes(ymin=significant-SE, ymax=significant+SE),width=0)+
geom_point(size=2)+
geom_hline(yintercept = 0.8,lty=2)+
labs(y="power")
cd4 <- read.csv("https://raw.githubusercontent.com/mattelisi/RHUL-stats/main/data/cd4_mod.csv")
str(cd4)
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
rm(list=ls())
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "added workshop LMM with links"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "LMM links fixed (hopefully)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "trying : xaringanExtra::embed_xaringan()"')
system("git push origin main")
webshot::install_phantomjs()
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
