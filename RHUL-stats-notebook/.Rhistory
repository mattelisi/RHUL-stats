sigma <- 1
alpha <- 0.5
# # support of random variable X (for plotting)
# supp_x <- seq(-2,4,length.out=500)
# calculate optima criterion
optimal_c <- 1/d_prime * log((1-alpha)/alpha) + d_prime/2
# # calculate probability density and scale by prior probability
# fS <- alpha*dnorm(supp_x, mean=d_prime, sd=sigma)
# fN <- (1-alpha)*dnorm(supp_x, mean=0, sd=sigma)
#
# # plot
# plot(supp_x, fS, type="l",lwd=2,col="black",xlab="X",ylab="p(X)")
# lines(supp_x, fN, lwd=2,col="dark grey")
# abline(v=optimal_c,lwd=1.5,lty=1,col="red")
# legend("topleft",c(expression("f"["S"]),expression("f"["N"])),col=c("black","dark grey"),lwd=2,title = "source:",bty="n")
# simulate 2*10^5 trials and calculate the confidence
tar_pres <- c(rep(0,10^5),rep(1,10^5))
x <- tar_pres*d_prime + rnorm(length(tar_pres), mean=0, sd=1)
resp_yes <- ifelse(x >= optimal_c,1,0)
# define a custom function to calculate confidence
confidenceSDT1 <- function(x,resp,d_prime, alpha=0.5){
conf <- ifelse(
resp==1,
dnorm(x,mean=d_prime,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1)),
dnorm(x,mean=0,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1))
)
return(conf)
}
# calculate confidence
confidence <- confidenceSDT1(x, resp_yes, d_prime=1.5)
# put into a dataframe for plotting
d <- data.frame(confidence, x, tar_pres, resp_yes)
# check which simulated responses are correct
d$correct <- ifelse((d$tar_pres==1 & d$resp_yes==1)|(d$tar_pres==0 & d$resp_yes==0),1,0)
# plot
d$tar <- ifelse(d$tar_pres==1,"signal present","signal absent")
d$correct <- ifelse(d$correct==1," correct response","wrong response")
ggplot(d,aes(x=confidence,group=correct,color=correct,fill=correct))+
geom_histogram(position = 'dodge',aes(y=..density..), binwidth=0.2)+
facet_grid(.~tar)+
scale_color_manual(values=c("dark green","red"),name="")+
scale_fill_manual(values=c("dark green","red"),name="")+
labs(x="confidence level")+
theme_classic()
rm(list=ls())
library(ggplot2)
# settings
d_prime <- 1.5
sigma <- 1
alpha <- 0.5
# # support of random variable X (for plotting)
# supp_x <- seq(-2,4,length.out=500)
# calculate optima criterion
optimal_c <- 1/d_prime * log((1-alpha)/alpha) + d_prime/2
# # calculate probability density and scale by prior probability
# fS <- alpha*dnorm(supp_x, mean=d_prime, sd=sigma)
# fN <- (1-alpha)*dnorm(supp_x, mean=0, sd=sigma)
#
# # plot
# plot(supp_x, fS, type="l",lwd=2,col="black",xlab="X",ylab="p(X)")
# lines(supp_x, fN, lwd=2,col="dark grey")
# abline(v=optimal_c,lwd=1.5,lty=1,col="red")
# legend("topleft",c(expression("f"["S"]),expression("f"["N"])),col=c("black","dark grey"),lwd=2,title = "source:",bty="n")
# simulate 2*10^5 trials and calculate the confidence
tar_pres <- c(rep(0,10^5),rep(1,10^5))
x <- tar_pres*d_prime + rnorm(length(tar_pres), mean=0, sd=1)
resp_yes <- ifelse(x >= optimal_c,1,0)
# define a custom function to calculate confidence
confidenceSDT1 <- function(x,resp,d_prime, alpha=0.5){
conf <- ifelse(
resp==1,
dnorm(x,mean=d_prime,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1)),
dnorm(x,mean=0,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1))
)
return(conf)
}
# calculate confidence
confidence <- confidenceSDT1(x, resp_yes, d_prime=1.5)
# put into a dataframe for plotting
d <- data.frame(confidence, x, tar_pres, resp_yes)
# check which simulated responses are correct
d$correct <- ifelse((d$tar_pres==1 & d$resp_yes==1)|(d$tar_pres==0 & d$resp_yes==0),1,0)
# plot
d$tar <- ifelse(d$tar_pres==1,"signal present","signal absent")
d$correct <- ifelse(d$correct==1," correct response","wrong response")
ggplot(d,aes(x=confidence,group=correct,color=correct,fill=correct))+
geom_histogram(position = 'dodge',aes(y=..density..), binwidth=0.1)+
facet_grid(.~tar)+
scale_color_manual(values=c("dark green","red"),name="")+
scale_fill_manual(values=c("dark green","red"),name="")+
labs(x="confidence level")+
theme_classic()
rm(list=ls())
library(ggplot2)
# settings
d_prime <- 1.5
sigma <- 1
alpha <- 0.5
# # support of random variable X (for plotting)
# supp_x <- seq(-2,4,length.out=500)
# calculate optima criterion
optimal_c <- 1/d_prime * log((1-alpha)/alpha) + d_prime/2
# # calculate probability density and scale by prior probability
# fS <- alpha*dnorm(supp_x, mean=d_prime, sd=sigma)
# fN <- (1-alpha)*dnorm(supp_x, mean=0, sd=sigma)
#
# # plot
# plot(supp_x, fS, type="l",lwd=2,col="black",xlab="X",ylab="p(X)")
# lines(supp_x, fN, lwd=2,col="dark grey")
# abline(v=optimal_c,lwd=1.5,lty=1,col="red")
# legend("topleft",c(expression("f"["S"]),expression("f"["N"])),col=c("black","dark grey"),lwd=2,title = "source:",bty="n")
# simulate 2*10^5 trials and calculate the confidence
tar_pres <- c(rep(0,10^5),rep(1,10^5))
x <- tar_pres*d_prime + rnorm(length(tar_pres), mean=0, sd=1)
resp_yes <- ifelse(x >= optimal_c,1,0)
# define a custom function to calculate confidence
confidenceSDT1 <- function(x,resp,d_prime, alpha=0.5){
conf <- ifelse(
resp==1,
dnorm(x,mean=d_prime,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1)),
dnorm(x,mean=0,sd=1)/(dnorm(x,mean=d_prime,sd=1)+dnorm(x,mean=0,sd=1))
)
return(conf)
}
# calculate confidence
confidence <- confidenceSDT1(x, resp_yes, d_prime=1.5)
# put into a dataframe for plotting
d <- data.frame(confidence, x, tar_pres, resp_yes)
# check which simulated responses are correct
d$correct <- ifelse((d$tar_pres==1 & d$resp_yes==1)|(d$tar_pres==0 & d$resp_yes==0),1,0)
# plot
d$tar <- ifelse(d$tar_pres==1,"signal present","signal absent")
d$correct <- ifelse(d$correct==1," correct response","wrong response")
ggplot(d,aes(x=confidence,group=correct,color=correct,fill=correct))+
geom_histogram(position = 'dodge',aes(y=..density..), binwidth=0.05)+
facet_grid(.~tar)+
scale_color_manual(values=c("dark green","red"),name="")+
scale_fill_manual(values=c("dark green","red"),name="")+
labs(x="confidence level")+
theme_classic()
?bookdown::render_book
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
# bookdown::render_book("index.Rmd", "bookdown::pdf_book",
#                       output_dir = "../",
#                       new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "update (auto)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "update (auto)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "SDT added)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "pop_brain image added)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "minor"')
system("git push origin main")
rm(list=ls())
setwd("/home/matteo/Dropbox/sync/RHUL/stats_role/rosie_drysdale")
library(ggplot2)
library(ordinal)
library(tidyverse)
library(DescTools)
# CUSTOM FUNCTIONS
# this function calculate probabilities given linear predictor
ordered_logistic <- function(eta, cutpoints){
cutpoints <- c(cutpoints, Inf)
k <- length(cutpoints)
p <- rep(NA, k)
p[1] <- plogis(cutpoints[1], location=eta, scale=1, lower.tail=TRUE)
for(i in 2:k){
p[i] <- plogis(cutpoints[i], location=eta, scale=1, lower.tail=TRUE) -
plogis(cutpoints[i-1], location=eta, scale=1, lower.tail=TRUE)
}
return(p)
}
## SIMULATE SOME DATA
set.seed(5)
N <- 200
N_id <- 10
dat <- data.frame(
id = factor(sample(1:N_id,N, replace = T)),
d1 = rbinom(N,1,0.5), # dumy variable (0,1) indicate 2 discrete conditions
x1 = runif(n = N, min = 1, max = 10)
)
rfx <- rnorm(length(unique(dat$id)), mean=0, sd=5)
LP <- 0.5*dat$x1 + 2*dat$d1 + rfx[dat$id]
for(i in 1:N){
dat$response[i] <- which(rmultinom(1,1, ordered_logistic(LP[i], c(0,2.5, 5,10)))==1)
}
dat$response <- factor(dat$response)
rm(list=ls())
library(ggplot2)
library(ordinal)
library(tidyverse)
library(DescTools)
# CUSTOM FUNCTIONS
# this function calculate probabilities given linear predictor
ordered_logistic <- function(eta, cutpoints){
cutpoints <- c(cutpoints, Inf)
k <- length(cutpoints)
p <- rep(NA, k)
p[1] <- plogis(cutpoints[1], location=eta, scale=1, lower.tail=TRUE)
for(i in 2:k){
p[i] <- plogis(cutpoints[i], location=eta, scale=1, lower.tail=TRUE) -
plogis(cutpoints[i-1], location=eta, scale=1, lower.tail=TRUE)
}
return(p)
}
## SIMULATE SOME DATA
set.seed(5)
N <- 200
N_id <- 10
dat <- data.frame(
id = factor(sample(1:N_id,N, replace = T)),
d1 = rbinom(N,1,0.5), # dumy variable (0,1) indicate 2 discrete conditions
x1 = runif(n = N, min = 1, max = 10)
)
rfx <- rnorm(length(unique(dat$id)), mean=0, sd=5)
LP <- 0.5*dat$x1 + 2*dat$d1 + rfx[dat$id]
for(i in 1:N){
dat$response[i] <- which(rmultinom(1,1, ordered_logistic(LP[i], c(0,2.5, 5,10)))==1)
}
dat$response <- factor(dat$response)
str(dat)
# visualize (aggregated) ordinal response
ggplot(dat,aes(x=response))+
geom_bar()+
facet_grid(.~d1)
model <- clmm(response ~ x1 + d1 + (1|id), data = dat)
summary(model)
# since we have 4 categories in this example
pred_mat <- matrix(NA, nrow=N, ncol=length(unique( dat$response)))
for(i in 1:N){
# first calculate the linear predictor by summing all variable as indicated
# in the model formulate, weighted by the coefficients
eta <- dat$x1[i]*model$beta['x1'] +  dat$d1[i]*model$beta['d1'] + model$ranef[dat$id[i]]
# note that + model$ranef[dat$id[i]] adds the random intercept for the subjects of observation i
# calculate vector of predicted probabilities
pred_mat[i,] <- ordered_logistic(eta, model$Theta)
}
# add predictions to dataset
pred_dat <- data.frame(pred_mat)
colnames(pred_dat) <- paste("resp_",1:ncol(pred_mat),sep="")
pred_dat <- cbind(dat, pred_dat)
str(pred_dat)
## VISUALIZE PREDICTIONS AND MODEL FIT
# average predictions according to condition
pred_dat %>%
pivot_longer(cols=starts_with("resp_"),
names_prefix="resp_",
values_to = "prob",
names_to ="response_category") %>%
group_by(d1, response_category) %>%
summarise(prob = mean(prob),
n=sum(response==response_category)) %>%
group_by(d1) %>%
mutate(prop_obs = n/sum(n),
response=as.numeric(response_category)) -> pred_d1
pred_d1$CI_lb <- MultinomCI(pred_d1$n)[,"lwr.ci"] *2
pred_d1$CI_ub <- MultinomCI(pred_d1$n)[,"upr.ci"] *2
# visualize (aggregated) ordinal response & prediction
# the black line are the predictions of the model
# ggplot(dat,aes(x=response))+
#   geom_bar(aes(y = ..prop.., group = 1))+
#   geom_errorbar(data=pred_d1, aes(ymin=CI_lb, ymax=CI_ub), size=2,width=0, color="grey")+
#   facet_grid(.~d1)+
#   geom_line(data=pred_d1, aes(y=prob), size=2)
ggplot(pred_d1,aes(x=response, y=prop_obs))+
geom_col()+
geom_errorbar(data=pred_d1, aes(ymin=CI_lb, ymax=CI_ub),width=0.2)+
facet_grid(.~d1)+
geom_line(data=pred_d1, aes(y=prob), size=2)+
labs(y="probability")
## split also by ID
pred_dat %>%
pivot_longer(cols=starts_with("resp_"),
names_prefix="resp_",
values_to = "prob",
names_to ="response_category") %>%
group_by(id, d1, response_category) %>%
summarise(prob = mean(prob),
n=sum(response==response_category)) %>%
group_by(d1, id) %>%
mutate(prop_obs = n/sum(n),
response=as.numeric(response_category))  -> pred_d1
# calculate multinomial CI
pred_d1$CI_lb <- NA
pred_d1$CI_ub <- NA
for(i in unique(pred_d1$id)){
for(cond in c(0,1)){
pred_d1$CI_lb[pred_d1$id==i & pred_d1$d1==cond] <- DescTools::MultinomCI(pred_d1$n[pred_d1$id==i & pred_d1$d1==cond])[,"lwr.ci"]
pred_d1$CI_ub[pred_d1$id==i & pred_d1$d1==cond] <- DescTools::MultinomCI(pred_d1$n[pred_d1$id==i & pred_d1$d1==cond])[,"upr.ci"]
}
}
pred_d1 %>%
mutate(condition = factor(d1)) %>%
ggplot(aes(x=response, y=prop_obs, fill=condition))+
geom_col()+
geom_errorbar(aes(ymin=CI_lb, ymax=CI_ub, color=condition), width=0.2)+
facet_grid(d1~id)+
geom_line(aes(y=prob), size=2)+
labs(y="probability")
pred_d1 %>%
mutate(condition = factor(d1)) %>%
ggplot(aes(x=response, y=prop_obs, fill=condition))+
geom_col()+
geom_errorbar(aes(ymin=CI_lb, ymax=CI_ub, color=condition), width=0.2)+
facet_grid(id~d1)+
geom_line(aes(y=prob), size=2)+
labs(y="probability")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
