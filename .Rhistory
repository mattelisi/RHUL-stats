mu = c(0,0),
Sigma=matrix(c(1,r,r,1)))
MASS::mvrnorm(N,
mu = c(0,0),
Sigma=matrix(c(1,r,r,1), nrow=2, ncol=2))
d <- MASS::mvrnorm(N,
mu = c(0,0),
Sigma=matrix(c(1,r,r,1), nrow=2, ncol=2))
str(d)
str(data.frame(d))
d1 <- sim_data
N <- 100
r <- 0.3
sim_data <- function(N, r){
d <- MASS::mvrnorm(N,
mu = c(0,0),
Sigma=matrix(c(1,r,r,1), nrow=2, ncol=2))
return(data.frame(d))
}
# function that calculate F transform and statistics
Fisher_Z_test <- function(r1, r2, N1, N2){
Z1 <- (log(1+r1) - log(1-r1))/2
Z2 <- (log(1+r2) - log(1-r2))/2
denomin <- sqrt(1/(N1-3) + 1/(N2-3))
Delta_Z <- abs(Z1 - Z2)/denomin
p_value <- 2*(1-pnorm(Delta_Z))
}
d1 <- sim_data()
sim_data <- function(N=100, r=0.3){
d <- MASS::mvrnorm(N,
mu = c(0,0),
Sigma=matrix(c(1,r,r,1), nrow=2, ncol=2))
return(data.frame(d))
}
d1 <- sim_data()
d1 <- sim_data()
d2 <- sim_data()
Fisher_Z_test <- function(r1, r2, N1, N2){
Z1 <- (log(1+r1) - log(1-r1))/2
Z2 <- (log(1+r2) - log(1-r2))/2
denomin <- sqrt(1/(N1-3) + 1/(N2-3))
Delta_Z <- abs(Z1 - Z2)/denomin
p_value <- 2*(1-pnorm(Delta_Z))
}
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
r1
r2
Fisher_Z_test <- function(r1, r2, N1, N2){
Z1 <- (log(1+r1) - log(1-r1))/2
Z2 <- (log(1+r2) - log(1-r2))/2
denomin <- sqrt(1/(N1-3) + 1/(N2-3))
Delta_Z <- abs(Z1 - Z2)/denomin
p_value <- 2*(1-pnorm(Delta_Z))
return(list(Delta_Z, p_value))
}
Fisher_Z_test(r1, r1, 100, 100)
Fisher_Z_test(r1, r1, 100, 100)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r1, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
Fisher_Z_test(r1, r2, 100, 100)
Fisher_Z_test <- function(r1, r2, N1, N2){
Z1 <- (log(1+r1) - log(1-r1))/2
Z2 <- (log(1+r2) - log(1-r2))/2
denomin <- sqrt(1/(N1-3) + 1/(N2-3))
Delta_Z <- abs(Z1 - Z2)/denomin
p_value <- 2*(1-pnorm(Delta_Z))
return(list(statistic=Delta_Z, p=p_value))
}
test.results <- Fisher_Z_test(r1, r2, 100, 100)
test.results
N_sim <- 1e4
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
hist(p_vals)
mean(p_vals<0.05)
# false positive rate
mean(p_vals<=0.05)
set.seed(1)
N_sim <- 1e3
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
set.seed(1)
N_sim <- 1e3
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
set.seed(1)
N_sim <- 1e3
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
set.seed(3)
N_sim <- 1e3
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
set.seed(3)
N_sim <- 1e4
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
set.seed(123)
N_sim <- 1e4
p_vals <- rep(NA, N_sim)
for(i in 1:N_sim){
d1 <- sim_data()
d2 <- sim_data()
r1 <- cor(d1$X1, d1$X2)
r2 <- cor(d2$X1, d2$X2)
test.results <- Fisher_Z_test(r1, r2, 100, 100)
p_vals[i] <- test.results$p
}
# false positive rate
# should be less than desired alpha value
# (here 0.05)
mean(p_vals<0.05)
?hetcor
library(polycor)
?hetcor
servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "meta-analysis workshop added"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
# servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
# bookdown::render_book("index.Rmd", "bookdown::pdf_book",
#                       output_dir = "../",
#                       new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "fixed correlations chapter"')
system("git push origin main")
servr::daemon_stop(2)
servr::daemon_stop(1)
servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
output_dir = "../docs")
# servr::daemon_stop(1)
servr::daemon_stop(1)
servr::daemon_stop(2)
servr::daemon_stop(3)
servr::daemon_stop(4)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "updated also PDF"')
system("git push origin main")
