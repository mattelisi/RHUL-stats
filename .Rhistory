plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dnorm(x, mean = prior.mean, sd = prior.sd),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dnorm(x_0, prior.mean, prior.sd), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dnorm(x_0, prior.mean,
prior.sd), digits = 2), "\n"))
invisible(posterior_w/dnorm(x_0, prior.mean, prior.sd))
}
savage.dickey.bf(posterior_samples$slope, x_0 = 0, prior.mean = 0.5, prior.sd = 1, plot = T)
library(tidyverse)
library(rtdists)
ddm_fit <- readRDS("ddm_fit.RDS")
rm(list=ls())
hablar::set_wd_to_script_path()
library(tidyverse)
library(rtdists)
set.seed(123)
samples <- rdiffusion(500,
a=1, # threshold separation
v=1, # drift rate
t0 = 0.25, # non-decision time
z = 0.5 * 1, # starting point/bias
d = 0, # different in response execution time
sz = 0, sv = 0, st0 = 0, # inter-trial variabilities
s = 1, # diffusion constant
precision = 3, stop_on_error = TRUE, maxt = 20,
interval = c(0, 10), method = c("fastdm", "qdiffusion"))
d <- data.frame(
resp = ifelse(samples$response == "upper", 1, 0),
rt = samples$rt
)
mean(d$resp)
d %>%
mutate(resp = factor(resp)) %>%
ggplot(aes(x=rt, color=resp, fill=resp))+
geom_histogram(binwidth=0.05, color="white") +
facet_grid(.~resp)
write_csv(d,"ddm_data.csv")
library(rstan)
options(mc.cores = parallel::detectCores()) # indicate stan to use multiple cores if available
data_stan <- list(
N = nrow(d),
rt = d$rt,
resp = d$resp
)
library(rstan)
# ddm_fit <- stan(file = "ddm4p.stan", data = data_stan, iter = 2000, chains = 4)
# saveRDS(ddm_fit, "ddm_fit.RDS")
ddm_fit <- readRDS("ddm_fit.RDS")
print(ddm_fit)
# make a plot
library(tidybayes)
library(rtdists)
library(ggplot2)
# Step 1: Extract samples
samples <- ddm_fit %>%
spread_draws(v, a, t0, z) # Extracts the parameters
# Step 2: Compute average parameters
avg_params <- samples %>%
summarise(across(c(v, a, t0, z), \(x) mean(x, na.rm = TRUE)))
# Use the average parameters for prediction
avg_v <- avg_params$v
avg_a <- avg_params$a
avg_t0 <- avg_params$t0
avg_z <- avg_params$z
# Step 3: Predict probability density for each data point and response type
rt_seq <- seq(min(d$rt), max(d$rt), length.out = 100)
predicted_densities <- expand.grid(rt = rt_seq, resp = c(0, 1))
predicted_densities$pd <- with(predicted_densities, ddiffusion(rt, response = ifelse(resp == 1, "upper", "lower"),
a = avg_a, v = avg_v, t0 = avg_t0,
z = avg_z * avg_a))
predicted_densities$resp <- factor(predicted_densities$resp)
# Step 4: Create a plot with facets for each response type
binwidth <- 0.05
d%>%
mutate(resp = factor(resp)) %>%
ggplot(aes(x = rt, fill=resp, color=resp, group=resp)) +
geom_histogram(aes(y = ..count../sum(..count..)/binwidth), binwidth = 0.05, alpha = 0.75, color="white") +
geom_line(data = predicted_densities, aes(x = rt, y = pd, group = resp),size = 1.5) +
facet_wrap(~ resp) +
labs(x = "Response Time", y = "Density")
# plot of parameter values
# Extract samples and convert to long format for plotting
parameter_samples <- gather_draws(ddm_fit, v, a, t0, z)
# Create violin plot with 95% HDI intervals
ddm_fit %>%
spread_draws(v, a, t0, z) %>%
pivot_longer(cols = c(v, a, t0, z), names_to = "parameter", values_to = "value") %>%
ggplot(aes(y = parameter, x = value)) +
stat_halfeye(.width = .95,normalize="groups") +
labs(x="value",y="parameter") +
ggtitle(label="4-parameters DDM")
savage.dickey.bf <- function (x, x_0 = 0, prior.mean = 0, prior.sd = 1, plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])/3
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dnorm(x, mean = prior.mean, sd = prior.sd),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dnorm(x_0, prior.mean, prior.sd), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dnorm(x_0, prior.mean,
prior.sd), digits = 2), "\n"))
invisible(posterior_w/dnorm(x_0, prior.mean, prior.sd))
}
str(samples)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])/3
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dnorm(x_0, prior.mean, prior.sd))
}
str(samples)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])/3
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dnorm(x_0, prior.mean, prior.sd))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dbeta(x_0,2,2))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(0,1), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dbeta(x_0,2,2))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(0,1), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(0, 1, length.out = 2500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dbeta(x_0,2,2))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T)
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T, breaks=20)
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T, breaks=20)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(0,1), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(0, 1, length.out = 2500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dbeta(x_0,2,2))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T, breaks=20)
savage.dickey.bf <- function (x, x_0 = 0,  plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(0,1), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(0, 1, length.out = 2500)
lines(x, dbeta(x,2,2),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dbeta(x_0,2,2), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dbeta(x_0,2,2), digits = 3), "\n"))
invisible(posterior_w/dbeta(x_0,2,2))
}
savage.dickey.bf(samples$z, x_0 = 0.5,  plot = T, breaks=10)
4e4
savage.dickey.bf(rnorm(4e3, 0.2, 0.5), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf <- function (x, x_0 = 0, prior.mean = 0, prior.sd = 1, plot = F, breaks=30) {
require(polspline)
fit.posterior <- logspline(x)
posterior_w <- dlogspline(x_0, fit.posterior)
if (plot) {
R <- (fit.posterior$range[2] - fit.posterior$range[1])/3
hist(x, xlab = "parameter value", ylab = "density", breaks=breaks,
col="grey", border="white", freq=FALSE,
xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), main="")
plot(fit.posterior, xlab = "parameter value", ylab = "density",
lwd = 2, xlim = c(fit.posterior$range[1] - R, fit.posterior$range[2] +
R), add=T)
x <- seq(fit.posterior$range[1] - R, fit.posterior$range[2] +
R, length.out = 500)
lines(x, dnorm(x, mean = prior.mean, sd = prior.sd),
col = "red", lwd = 2)
abline(v = x_0, lty = 2)
points(x_0, posterior_w, pch = 19, col = "black")
points(x_0, dnorm(x_0, prior.mean, prior.sd), pch = 19,
col = "red")
legend("topright", c("posterior", "prior"), lwd = 2,
col = c("black", "red"), pch = 19, bty = "n", inset = 0.02)
}
cat(paste0("Approximate BF (Savage-Dickey) in favor of null x=",
x_0, " : ", round(posterior_w/dnorm(x_0, prior.mean,
prior.sd), digits = 2), "\n"))
invisible(posterior_w/dnorm(x_0, prior.mean, prior.sd))
}
savage.dickey.bf(rnorm(4e3, 0.2, 0.5), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.3, 0.5), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.3, 0.5), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.3, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 1.3, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 2.2, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.2, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.3, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
par(mfrow=c(1,2))
set.seed(123)
savage.dickey.bf(rnorm(4e3, 0.3, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.8, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/avage.dickey.bf(rnorm(4e3, 0.8, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.8, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.4, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.5, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.6, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.55, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.58, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.57, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.58, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
1/savage.dickey.bf(rnorm(4e3, 0.58, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
par(mfrow=c(1,2))
set.seed(123)
savage.dickey.bf(rnorm(4e3, 0.3, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
savage.dickey.bf(rnorm(4e3, 0.58, 0.3), x_0 = 0, prior.mean = 0, prior.sd = 1, plot = T)
unlink("intro-Bayes-slides/intro-Bayes_cache", recursive = TRUE)
rm(list=ls())
hablar::set_wd_to_script_path()
# Bayesian regression in stan example
rm(list=ls())
hablar::set_wd_to_script_path()
# ----
# data
d <- read.table ("./data/wagespeed.csv",
header=T,
sep=",")
head(d)
# ----
# prepare data for modelling:
# function to standardize variables
standardize <- function(x){
Z <- (x - mean(x)) / sd(x)
return(Z)
}
# prepare data to fit in Stan
data_stan <- list(
N = nrow(d),
wage = standardize(d$wage),
wspeed = standardize(d$wspeed)
)
plot(standardize(d$wage), standardize(d$wspeed),
xlab = "Hourly wage (Z-score)",
ylab = "Mean walking speed (Z-score)",
pch = 19,       # solid circle points
col = "blue",   # blue color for the points
cex.lab = 1.2,  # size of axis labels
cex.main = 1.3, # size of plot title
cex=1.3,
xlim=c(-2.5, 2.5), ylim=c(-2.5,2.5))
text(standardize(d$wage), standardize(d$wspeed), labels = d$city, pos = 4, cex = 0.7, offset = 0.5, srt = 30)
# Create the scatter plot
plot(standardize(d$wage), standardize(d$wspeed),
xlab = "Hourly wage (Z-score)",
ylab = "Mean walking speed (Z-score)",
pch = 19,       # solid circle points
col = "blue",   # blue color for the points
cex.lab = 1.2,  # size of axis labels
cex.main = 1.3, # size of plot title
cex=1.3,
xlim=c(-2.5, 2.5), ylim=c(-2.5,2.5))
# Add city labels, tilt only specified cities
text(standardize(d$wage), standardize(d$wspeed), labels = d$city, pos = 4, cex = 0.7, offset = 0.5, srt = -30)
# Add city labels, tilt only specified cities
text(standardize(d$wage), standardize(d$wspeed), labels = d$city, pos = 4, cex = 0.7, offset = 0.5, srt = 0)
# Create the scatter plot
plot(standardize(d$wage), standardize(d$wspeed),
xlab = "Hourly wage (Z-score)",
ylab = "Mean walking speed (Z-score)",
pch = 19,       # solid circle points
col = "blue",   # blue color for the points
cex.lab = 1.2,  # size of axis labels
cex.main = 1.3, # size of plot title
cex=1.3,
xlim=c(-2.5, 2.5), ylim=c(-2.5,2.5))
# Add city labels, tilt only specified cities
text(standardize(d$wage), standardize(d$wspeed), labels = d$city, pos = 4, cex = 0.7, offset = 0.5, srt = 0)
# Bayesian DDM example
rm(list=ls())
hablar::set_wd_to_script_path()
# ----
# data
d <- read_csv("./ddm_data.csv")                      # load data
# ----
# data
d <- read_csv("./data/ddm_data.csv")                      # load data
d %>%                                                 # make a plot
mutate(resp = factor(resp)) %>%
ggplot(aes(x=rt, color=resp, fill=resp))+
geom_histogram(binwidth=0.05, color="white") +
facet_grid(.~resp)
rm(list=ls())
setwd("~/Dropbox/sync/blog/webdown")
rm(list=ls())
#setwd("~/Dropbox/sync/blog/webdown")
setwd("/mnt/D/Dropbox/sync/blog/webdown")
blogdown::build_site()
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# setwd("~/git_local/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# # servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
# bookdown::render_book("index.Rmd", "bookdown::pdf_book",
#                       output_dir = "../",
#                       new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
# setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
setwd("~/git_local/RHUL-stats/")
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# setwd("~/git_local/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# # servr::daemon_stop(1)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
# setwd("~/git_local/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "added intro Bayes slides"')
system("git push origin main")
