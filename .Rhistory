return(list(mu = par[1] + U1_i,
sigma = exp(par[2] + U2_i)))
}
d$bias <- NA; d$sigma <- NA;
for(i in 1:nrow(d)){
par_i <- individual_parameters(d$id_n[i], d$refugee[i], fit)
d$bias[i] <- par_i$mu
d$sigma[i] <- par_i$sigma
}
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
# my_fn <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point(color="blue",size=1.2, alpha=0.3) +
#     #geom_smooth(method=loess, fill="red", color="red", ...) +
#     geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
#     stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
#   p
# }
my_fn <- function(data, mapping, ...){
# takes in x and y for each panel
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
colorData <- eval_data_col(data, mapping$colour)
# if you have colors, split according to color group and calculate cor
byGroup =by(data.frame(xData,yData),colorData,function(i)printVar(i[,1],i[,2]))
byGroup = data.frame(col=names(byGroup),label=as.character(byGroup))
byGroup$x = 0.5
byGroup$y = seq(0.8-0.3,0.2,length.out=nrow(byGroup))
#main correlation
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
geom_text(data=byGroup,inherit.aes=FALSE,
aes(x=x,y=y,col=col,label=label),size=3)+
theme_void() + ylim(c(0,1))
p
}
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
# my_fn <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point(color="blue",size=1.2, alpha=0.3) +
#     #geom_smooth(method=loess, fill="red", color="red", ...) +
#     geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
#     stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
#   p
# }
my_fn <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
+annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3)
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
# my_fn <- function(data, mapping, ...){
#   # takes in x and y for each panel
#   xData <- eval_data_col(data, mapping$x)
#   yData <- eval_data_col(data, mapping$y)
#
#   # if you have colors, split according to color group and calculate cor
#
#   byGroup =by(data.frame(xData,yData),colorData,function(i)printVar(i[,1],i[,2]))
#   byGroup = data.frame(col=names(byGroup),label=as.character(byGroup))
#   byGroup$x = 0.5
#   byGroup$y = seq(0.8-0.3,0.2,length.out=nrow(byGroup))
#
#  #main correlation
#  mainCor = printVar(xData,yData)
#
#  p <- ggplot(data = data, mapping = mapping) +
#  annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
#  geom_text(data=byGroup,inherit.aes=FALSE,
#  aes(x=x,y=y,col=col,label=label),size=3)+
#  theme_void() + ylim(c(0,1))
#   p
# }
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
# my_fn <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point(color="blue",size=1.2, alpha=0.3) +
#     #geom_smooth(method=loess, fill="red", color="red", ...) +
#     geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
#     stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
#   p
# }
my_fn <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3)
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
# my_fn <- function(data, mapping, ...){
#   # takes in x and y for each panel
#   xData <- eval_data_col(data, mapping$x)
#   yData <- eval_data_col(data, mapping$y)
#
#   # if you have colors, split according to color group and calculate cor
#
#   byGroup =by(data.frame(xData,yData),colorData,function(i)printVar(i[,1],i[,2]))
#   byGroup = data.frame(col=names(byGroup),label=as.character(byGroup))
#   byGroup$x = 0.5
#   byGroup$y = seq(0.8-0.3,0.2,length.out=nrow(byGroup))
#
#  #main correlation
#  mainCor = printVar(xData,yData)
#
#  p <- ggplot(data = data, mapping = mapping) +
#  annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
#  geom_text(data=byGroup,inherit.aes=FALSE,
#  aes(x=x,y=y,col=col,label=label),size=3)+
#  theme_void() + ylim(c(0,1))
#   p
# }
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
# my_fn <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point(color="blue",size=1.2, alpha=0.3) +
#     #geom_smooth(method=loess, fill="red", color="red", ...) +
#     geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
#     stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
#   p
# }
my_fn <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
# my_fn <- function(data, mapping, ...){
#   # takes in x and y for each panel
#   xData <- eval_data_col(data, mapping$x)
#   yData <- eval_data_col(data, mapping$y)
#
#   # if you have colors, split according to color group and calculate cor
#
#   byGroup =by(data.frame(xData,yData),colorData,function(i)printVar(i[,1],i[,2]))
#   byGroup = data.frame(col=names(byGroup),label=as.character(byGroup))
#   byGroup$x = 0.5
#   byGroup$y = seq(0.8-0.3,0.2,length.out=nrow(byGroup))
#
#  #main correlation
#  mainCor = printVar(xData,yData)
#
#  p <- ggplot(data = data, mapping = mapping) +
#  annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
#  geom_text(data=byGroup,inherit.aes=FALSE,
#  aes(x=x,y=y,col=col,label=label),size=3)+
#  theme_void() + ylim(c(0,1))
#   p
# }
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
# my_fn <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point(color="blue",size=1.2, alpha=0.3) +
#     #geom_smooth(method=loess, fill="red", color="red", ...) +
#     geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
#     stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
#   p
# }
my_fn <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
# my_fn <- function(data, mapping, ...){
#   # takes in x and y for each panel
#   xData <- eval_data_col(data, mapping$x)
#   yData <- eval_data_col(data, mapping$y)
#
#   # if you have colors, split according to color group and calculate cor
#
#   byGroup =by(data.frame(xData,yData),colorData,function(i)printVar(i[,1],i[,2]))
#   byGroup = data.frame(col=names(byGroup),label=as.character(byGroup))
#   byGroup$x = 0.5
#   byGroup$y = seq(0.8-0.3,0.2,length.out=nrow(byGroup))
#
#  #main correlation
#  mainCor = printVar(xData,yData)
#
#  p <- ggplot(data = data, mapping = mapping) +
#  annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3) +
#  geom_text(data=byGroup,inherit.aes=FALSE,
#  aes(x=x,y=y,col=col,label=label),size=3)+
#  theme_void() + ylim(c(0,1))
#   p
# }
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
#ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], upper = list(continuous = my_fn))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho","p")
paste(names(vals),unlist(vals),collapse="\n")
}
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
my_fn_upper <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3)
p
}
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
#ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous = my_fn_upper))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
# fancy correlogram
printVar = function(x,y){
vals = cor.test(x,y,
method="spearman")[c("estimate","p.value")]
vals[[1]]<-round(vals[[1]],2)
vals[[2]]<-ifelse(test = vals[[2]]<0.001,"<0.001",ifelse(test=vals[[2]]<0.01,"<0.01",round(vals[[2]],2)))
names(vals) = c("rho =","p =")
paste(names(vals),unlist(vals),collapse="\n")
}
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(color="blue",size=1.2, alpha=0.3) +
#geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", alpha=0.1, ...)+
stat_ellipse(type="norm", color="blue", size=0.4, na.rm=T, ...)
p
}
my_fn_upper <- function(data, mapping, ...){
xData <- eval_data_col(data, mapping$x)
yData <- eval_data_col(data, mapping$y)
mainCor = printVar(xData,yData)
p <- ggplot(data = data, mapping = mapping) +
annotate(x=0.5,y=0.8,label=mainCor,geom="text",size=3)
p
}
library(GGally)
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
d$logsigma <- log(d$sigma)
#ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous=wrap("cor", method="spearman")))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
ggpairs(d[,c("bias","logsigma","CRIES","AYMHS","DISTRESS","OPTIMISM")], lower = list(continuous = my_fn),upper=list(continuous = my_fn_upper))+ggtitle("Correlations (Spearman) with happy-sad task measures")+nice_theme
p <- 900
d <- runif(500, -900, 900)
d2 <- 2*pi*d/p
hist(d2)
d <- runif(100, -900, 900)
d2 <- 2*pi*d/p
hist(d2)
n <- 100
sum(sqrt(sin(d2)^2 + cos(d2)^2))
sum(sqrt(sin(d2)^2 + cos(d2)^2))/n
d <- rep(0,100)
d2 <- 2*pi*d/p
d2
sum(sqrt(sin(d2)^2 + cos(d2)^2))/n
sum(sqrt(sin(d2)^2 + cos(d2)^2))
d <- runif(100, -900, 900)
sum(sin(d2) + cos(d2))/n
(sum(sin(d2)) + sum(cos(d2)))
sum(sin(d2))
sum(cos(d2))
cos(d2)
d
d2
n <- 100
p <- 1000
d <- runif(n, -900,900)
omega <- 2*pi*d/p
hist(omega)
sum(omega)/n
d <- rep(0,n)
omega <- 2*pi*d/p
sum(omega)/n
d <- rep(100,n)
omega <- 2*pi*d/p
sum(omega)/n
n <- 100
p <- 1000
d <- runif(n, -900,900)
omega <- 2*pi*d/p
sum(omega) %% n
7 %% 3
sum(omega)
n
d <- rep(100,n)
omega <- 2*pi*d/p
sum(omega) %% n
n <- 100
p <- 1000
d <- runif(n, -900,900)
omega <- 2*pi*d/p
# modulus of sun
sqrt(sum(cos(omega))^2 + sum(sin(omega))^2)
n <- 100
p <- 1000
d <- runif(n, -900,900)
omega <- 2*pi*d/p
# modulus of sun
sqrt(sum(cos(omega))^2 + sum(sin(omega))^2)
# modulus of sun
sqrt(sum(cos(omega))^2 + sum(sin(omega))^2)/n
d <- rep(100,n)
omega <- 2*pi*d/p
sum(omega) / n
# modulus of sum
sqrt(sum(cos(omega))^2 + sum(sin(omega))^2)/n
d <- runif(n, 100,105)
omega <- 2*pi*d/p
# modulus of sum
sqrt(sum(cos(omega))^2 + sum(sin(omega))^2)/n
?dirichlet
?rdirichlet
?rdirich
?rdir
??dirichlet
gtools::rdirichlet(100, 1)
library(gtools)
?rdirichlet
gtools::rdirichlet(100, c(111))
gtools::rdirichlet(1, c(111))
rdirichlet(1, c(1,1,1))
rdirichlet(1000, c(1,1,1))
gtools::rdirichlet(1000, c(1,1,1)*0.1)
rdirichlet(1000, c(1,1,1))
Inf/Inf
log(Inf/Inf)
0/0
q()
exp(-0.129)
3785.72 * 12
50296 / 12
(4191.333 + 160.62) * 0.71
12 * 3559.60
36757.50/12
3785.72 * 12
install.packages("bnlearn")
install.packages("Rgraphviz")
?plot
?knitr::knit
install.packages("bookdown")
install.packages("bookdown")
exp(- 0.07)
library(lme4)
?predict.lmer
contr.sumn(3)
contr.sum(3)
contr.sum(2)
((75/2)*12)/45000 * 100
((75/2)*12)/45000
((75/2)*12)/45000 * 100
((75)*12)/45000 * 100
((75)*12)/25000 * 100
?choose
choose(5,6)
lchoose(5,6)
combn(1:5, 6)
libraray(tidyverse)
library(tidyverse)
d <- merge(1:5, 1:5, 1:5, 1:5, 1:5, 1:5)
d <- expand.grid(1:5, 1:5, 1:5, 1:5, 1:5, 1:5)
str(d)
d %>%
mutate(tot = Var1+Var2+Var3+Var4+Var5+Var6)
str(d)
d %>%
mutate(tot = Var1+Var2+Var3+Var4+Var5+Var6) ->d
str(d)
hist(d$tot)
length(unique(d$tot))
range(unique(d$tot))
d$mu <- d$tot/6
range(unique(d$mu))
length(unique(d$mu))
length(unique(d$mu))
hist(d$mu)
hist(d$mu, breaks=1/25)
hist(d$mu, breaks=25)
hist(d$mu, breaks=30)
d$sum
d$tot
hist(d$tot)
length(unique(d$mu))
length(unique(d$tot))
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "update (auto)"')
system("git push origin main")
#!/usr/bin/env Rscript
rm(list=ls())
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook")
# bookdown::serve_book(dir="/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/RHUL-stats-notebook",
#                      output_dir = "../docs")
# servr::daemon_stop(3)
bookdown::render_book("index.Rmd", "bookdown::bs4_book",
output_dir = "../docs",
new_session = TRUE)
bookdown::render_book("index.Rmd", "bookdown::pdf_book",
output_dir = "../",
new_session = TRUE)
options(bookdown.clean_book = TRUE)
bookdown::clean_book()
setwd("/mnt/sda2/matteoHDD/git_local_HDD/RHUL-stats/")
system("rm *.md")
system("rm *.tex")
system("git add -A")
system('git commit -m "added case study on models for count data"')
system("git push origin main")
